# item sizes
a = [
    11,
    10,
    11,
    12,
    9,
    14,
    12,
    13,
    9,
    7,
    10,
    7,
    7,
    12,
    15,
    12,
    9,
    17,
    7,
    14,
    14,
    7,
    12,
    18,
    7,
    16,
    15,
    13,
    11,
    11,
    11,
    17,
    15,
    18,
    9,
    19,
    12,
    14,
    12,
    14,
    14,
    18,
    17,
    16,
    12,
    14,
    8,
    15,
    13,
    10,
    9,
    7,
    12,
    14,
    7,
    13,
    11,
    15,
    8,
    17,
    9,
    14,
    14,
    19,
    12,
    17,
    18,
    17,
    11,
    13,
    14,
    8,
    13,
    11,
    19,
    18,
    7,
    10,
    13,
    13,
    13,
    17,
    14,
    19,
    14,
    14,
    14,
    7,
    12,
    17,
    17,
    16,
    11,
    13,
    15,
    17,
    10,
    13,
    16,
    17,
]

# profits
p = [
    13,
    10,
    10,
    16,
    15,
    19,
    12,
    15,
    17,
    12,
    11,
    19,
    8,
    7,
    19,
    7,
    11,
    18,
    14,
    17,
    17,
    12,
    16,
    10,
    16,
    7,
    19,
    17,
    7,
    15,
    11,
    13,
    18,
    14,
    11,
    16,
    13,
    17,
    13,
    12,
    11,
    19,
    12,
    12,
    8,
    11,
    13,
    13,
    12,
    9,
    12,
    9,
    14,
    10,
    15,
    13,
    10,
    14,
    12,
    10,
    12,
    16,
    18,
    12,
    11,
    12,
    10,
    19,
    11,
    17,
    12,
    15,
    18,
    19,
    7,
    7,
    10,
    15,
    13,
    15,
    18,
    7,
    7,
    14,
    10,
    15,
    9,
    15,
    11,
    14,
    7,
    16,
    11,
    18,
    9,
    15,
    12,
    14,
    16,
    16,
]

# knapsack capacity
b = 300

# import model and solve
import knapsackmodel

knapsackmodel.solve(a, p, b)

# translate problem into shortest path problem and solve
import shortestpath

capacity_units = list(range(0, b + 1))
item_indices = list(range(0, len(a) + 1))

nodes = list((i, j) for i in capacity_units for j in item_indices)

item_arcs = list(
    ((c, i - 1), (c + a[i - 1], i), -p[i - 1])
    for i in range(1, len(a) + 1)
    for c in range(0, b - a[i - 1] + 1)
)
skip_arcs = list(
    ((c, i), (c, i + 1), 0) for i in range(0, len(a)) for c in range(0, b + 1)
)
waste_arcs = list(
    ((c, i), (c + 1, i), 0) for i in range(0, len(a) + 1) for c in range(0, b)
)

arcs = item_arcs + skip_arcs + waste_arcs

shortestpath.solve(len(nodes), arcs, (0, 0), (b, len(a)))
